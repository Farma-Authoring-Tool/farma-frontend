#!/usr/bin/env bash
# https://github.com/nickjj/docker-rails-example/blob/main/run

# https://www.newline.co/courses/newline-guide-to-bash-scripting/errexit
set -o errexit
# https://gist.github.com/mohanpedala/1e2ff5661761d3abd0385e8223e16425#set--o-pipefail
set -o pipefail

DC="${DC:-exec}"

# If we're running in CI we need to disable TTY allocation for docker compose
# commands that enable it by default, such as exec and run.
TTY=""
if [[ ! -t 1 ]]; then
  TTY="-T"
fi

# -----------------------------------------------------------------------------
# Helper functions start with _ and aren't listed in this script's help menu.
# -----------------------------------------------------------------------------

function _dc {
  docker compose "${DC}" ${TTY} "${@}"
}

function _build_run_down {
  docker compose build
  docker compose run ${TTY} "${@}"
  docker compose down
}

# -----------------------------------------------------------------------------
function up {
  _docker compose up farma -d
}

function cmd {
  # Run any command you want in the web container
  _dc farma "${@}"
}

function yarn {
  # Run any Rails commands
  cmd yarn "${@}"
}

function server {
  cmd yarn run dev
}

function linters {
  cmd yarn lint 
}

#function test {
# 
#}

function shell {
  # Start a shell session in the web container
  cmd bash "${@}"
}

function help {
  printf "%s <task> [args]\n\nTasks:\n" "${0}"

  compgen -A function | grep -v "^_" | cat -n

  printf "\nExtended help:\n  Each task has comments for general usage\n"
}

# This idea is heavily inspired by: https://github.com/adriancooney/Taskfile
TIMEFORMAT=$'\nTask completed in %3lR'
time "${@:-help}"
